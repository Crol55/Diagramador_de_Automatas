
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 26 00:06:54 CST 2017
//----------------------------------------------------

package projectf;

import java_cup.runtime.Symbol;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 26 00:06:54 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\011\012\000\002\011\010\000" +
    "\002\012\006\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\012\003\000\002\013\011\000\002\013" +
    "\017\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\017\015\000" +
    "\002\017\017\000\002\020\006\000\002\021\024\000\002" +
    "\021\023" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\027\004\001\002\000\006\012\011\042" +
    "\012\001\002\000\004\002\007\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\010\012\ufffc\027" +
    "\ufffc\042\ufffc\001\002\000\004\033\172\001\002\000\004" +
    "\025\020\001\002\000\010\012\ufffb\027\ufffb\042\ufffb\001" +
    "\002\000\010\012\011\027\017\042\012\001\002\000\010" +
    "\012\ufffe\027\ufffe\042\ufffe\001\002\000\010\012\ufffd\027" +
    "\ufffd\042\ufffd\001\002\000\004\002\uffff\001\002\000\022" +
    "\006\022\020\027\021\026\022\023\030\024\031\025\040" +
    "\030\042\031\001\002\000\024\006\uffec\020\uffec\021\uffec" +
    "\022\uffec\025\uffec\030\uffec\031\uffec\040\uffec\042\uffec\001" +
    "\002\000\024\006\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9" +
    "\030\uffe9\031\uffe9\040\uffe9\042\uffe9\001\002\000\022\006" +
    "\022\020\027\021\026\022\023\030\024\031\025\040\030" +
    "\042\031\001\002\000\022\006\022\020\027\021\026\022" +
    "\023\030\024\031\025\040\030\042\031\001\002\000\022" +
    "\006\022\020\027\021\026\022\023\030\024\031\025\040" +
    "\030\042\031\001\002\000\022\006\022\020\027\021\026" +
    "\022\023\030\024\031\025\040\030\042\031\001\002\000" +
    "\022\006\022\020\027\021\026\022\023\030\024\031\025" +
    "\040\030\042\031\001\002\000\056\005\152\016\144\017" +
    "\141\020\142\021\140\022\147\023\150\024\137\025\136" +
    "\026\160\027\145\030\143\031\153\032\151\033\157\034" +
    "\135\035\133\036\155\037\154\042\161\044\134\045\156" +
    "\001\002\000\024\006\uffeb\020\uffeb\021\uffeb\022\uffeb\025" +
    "\uffeb\030\uffeb\031\uffeb\040\uffeb\042\uffeb\001\002\000\004" +
    "\025\033\001\002\000\006\004\035\013\034\001\002\000" +
    "\004\036\047\001\002\000\004\036\036\001\002\000\004" +
    "\007\037\001\002\000\004\024\040\001\002\000\004\010" +
    "\041\001\002\000\004\024\042\001\002\000\004\011\043" +
    "\001\002\000\004\037\044\001\002\000\004\026\045\001" +
    "\002\000\010\012\ufff2\027\ufff2\042\ufff2\001\002\000\004" +
    "\026\132\001\002\000\004\040\050\001\002\000\004\042" +
    "\051\001\002\000\004\040\052\001\002\000\004\024\053" +
    "\001\002\000\004\007\054\001\002\000\004\024\055\001" +
    "\002\000\004\010\056\001\002\000\004\024\057\001\002" +
    "\000\004\011\060\001\002\000\004\037\061\001\002\000" +
    "\006\025\062\026\uffd2\001\002\000\004\014\064\001\002" +
    "\000\004\026\uffd1\001\002\000\004\034\065\001\002\000" +
    "\004\040\067\001\002\000\006\035\111\040\110\001\002" +
    "\000\004\042\070\001\002\000\004\040\071\001\002\000" +
    "\004\025\072\001\002\000\004\013\073\001\002\000\004" +
    "\036\074\001\002\000\004\040\075\001\002\000\004\042" +
    "\076\001\002\000\004\040\077\001\002\000\004\024\100" +
    "\001\002\000\004\007\101\001\002\000\004\024\102\001" +
    "\002\000\004\010\103\001\002\000\004\024\104\001\002" +
    "\000\004\011\105\001\002\000\004\037\106\001\002\000" +
    "\004\026\107\001\002\000\006\035\uffce\040\uffce\001\002" +
    "\000\004\042\112\001\002\000\004\026\uffd0\001\002\000" +
    "\004\040\113\001\002\000\004\025\114\001\002\000\004" +
    "\013\115\001\002\000\004\036\116\001\002\000\004\040" +
    "\117\001\002\000\004\042\120\001\002\000\004\040\121" +
    "\001\002\000\004\024\122\001\002\000\004\007\123\001" +
    "\002\000\004\024\124\001\002\000\004\010\125\001\002" +
    "\000\004\024\126\001\002\000\004\011\127\001\002\000" +
    "\004\037\130\001\002\000\004\026\131\001\002\000\006" +
    "\035\uffcf\040\uffcf\001\002\000\010\012\ufff3\027\ufff3\042" +
    "\ufff3\001\002\000\004\040\uffd9\001\002\000\004\040\uffe3" +
    "\001\002\000\004\040\uffda\001\002\000\004\040\uffe1\001" +
    "\002\000\004\040\uffe2\001\002\000\004\040\uffe7\001\002" +
    "\000\004\040\uffd6\001\002\000\004\040\uffe8\001\002\000" +
    "\004\040\uffe5\001\002\000\004\040\uffd5\001\002\000\004" +
    "\040\uffde\001\002\000\004\040\162\001\002\000\004\040" +
    "\uffe6\001\002\000\004\040\uffdf\001\002\000\004\040\uffdc" +
    "\001\002\000\004\040\uffe4\001\002\000\004\040\uffdd\001" +
    "\002\000\004\040\uffd7\001\002\000\004\040\uffd8\001\002" +
    "\000\004\040\uffd4\001\002\000\004\040\uffdb\001\002\000" +
    "\004\040\uffe0\001\002\000\004\040\uffd3\001\002\000\024" +
    "\006\uffea\020\uffea\021\uffea\022\uffea\025\uffea\030\uffea\031" +
    "\uffea\040\uffea\042\uffea\001\002\000\022\006\022\020\027" +
    "\021\026\022\023\030\024\031\025\040\030\042\031\001" +
    "\002\000\024\006\ufff1\020\ufff1\021\ufff1\022\ufff1\025\ufff1" +
    "\030\ufff1\031\ufff1\040\ufff1\042\ufff1\001\002\000\024\006" +
    "\uffef\020\uffef\021\uffef\022\uffef\025\uffef\030\uffef\031\uffef" +
    "\040\uffef\042\uffef\001\002\000\022\006\022\020\027\021" +
    "\026\022\023\030\024\031\025\040\030\042\031\001\002" +
    "\000\024\006\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\030" +
    "\ufff0\031\ufff0\040\ufff0\042\ufff0\001\002\000\024\006\uffed" +
    "\020\uffed\021\uffed\022\uffed\025\uffed\030\uffed\031\uffed\040" +
    "\uffed\042\uffed\001\002\000\024\006\uffee\020\uffee\021\uffee" +
    "\022\uffee\025\uffee\030\uffee\031\uffee\040\uffee\042\uffee\001" +
    "\002\000\004\042\173\001\002\000\004\025\174\001\002" +
    "\000\004\045\175\001\002\000\010\024\176\026\201\032" +
    "\177\001\002\000\004\045\207\001\002\000\004\045\205" +
    "\001\002\000\012\012\ufff9\024\202\027\ufff9\042\ufff9\001" +
    "\002\000\012\012\ufff4\024\ufff4\027\ufff4\042\ufff4\001\002" +
    "\000\004\045\203\001\002\000\014\012\ufff7\024\ufff7\026" +
    "\204\027\ufff7\042\ufff7\001\002\000\012\012\ufff8\024\ufff8" +
    "\027\ufff8\042\ufff8\001\002\000\004\026\206\001\002\000" +
    "\010\012\ufffa\027\ufffa\042\ufffa\001\002\000\014\012\ufff5" +
    "\024\ufff5\026\210\027\ufff5\042\ufff5\001\002\000\012\012" +
    "\ufff6\024\ufff6\027\ufff6\042\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\004\003\005\001\001\000\010\005" +
    "\013\011\007\013\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\014" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\031\010\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\170\010\020\001" +
    "\001\000\006\006\167\010\020\001\001\000\006\006\165" +
    "\010\020\001\001\000\006\006\164\010\020\001\001\000" +
    "\006\006\162\010\020\001\001\000\004\007\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\163\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\166\010\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String resultado="";
public  boolean aceptadooo=true;

public static ArrayList<String> tablaerrorSintactico = new ArrayList();

// metodo cuando existe un error sintactico
    public void syntax_error(Symbol s){
 System.out.println("Error en la columna " + (s.right+1) +" linea "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
   JOptionPane.showMessageDialog( null,"Error en la columna " + (s.right+1) +" linea "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
   aceptadooo=false;
   tablaerrorSintactico.add(s.value+" "+s.left+" "+(s.right+1));
}

// metodo cuando ya no se puede recuperar errores 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
 System.out.println("Error en la columna " + (s.right+1)+ " linea "+s.left+". Identificador " +
        s.value + " no reconocido.");
//    JOptionPane.showMessageDialog( null,"Error en la columna " + (s.right+1) +" linea "+s.left+ ". Identificador "
//        +s.value + " no reconocido.");
    aceptadooo=false;
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


LinkedList<String> cola = new LinkedList<String>();
ArrayList<String> alfabeto= new ArrayList(); 
String expresion[];
AFN afn = new AFN();
Generar generar = new Generar();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETORNO ::= comillasD identificador comillasD seguido retorno parentesisA comillasD identificador comillasD coma ytext coma yrow coma ycol parentesisC puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNO ::= RETORNO comillasD identificador comillasD seguido retorno parentesisA comillasD identificador comillasD coma ytext coma yrow coma ycol parentesisC puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RESERVADAS ::= res corcheteAbierto RETORNO corcheteCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO ::= parentesisA comillasD identificador comillasD coma ytext coma yrow coma ycol parentesisC seguido RESERVADAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO ::= parentesisA comillasD identificador comillasD coma ytext coma yrow coma ycol parentesisC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // F ::= identificador 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // F ::= rang 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F ::= tabulacion 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F ::= com 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= parentesisC 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= parentesisA 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= corcheteCerrado 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F ::= corcheteAbierto 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // F ::= dospuntos 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // F ::= hasta 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // F ::= orr 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // F ::= iniciofin 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F ::= guionbajo 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F ::= puntoycoma 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // F ::= seguido 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // F ::= coma 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F ::= comillaS 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F ::= barra 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F ::= ceroomas 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= ceroouna 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F ::= unaomas 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F ::= concat 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=cadenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LO ::= todo 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LO ::= comillasD F comillasD 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="\""+var+"\"";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LO ::= identificador 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= LO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=""+a;          System.out.println("frase :"+a);     alfabeto.add(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= ceroomas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT="* "+a;        System.out.println("'*' "+a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= ceroouna E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT="? "+a;        System.out.println("'?' "+a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= unaomas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT="+ "+a;        System.out.println("'+' "+a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= orr E E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT="| "+a+" "+b;  System.out.print("or E : "+a);  System.out.println(" E :"+b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= concat E E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=". "+a+" "+b;    System.out.print("concat E : "+a);  System.out.println(" E "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EX ::= identificador seguido E seguido eror parentesisA ytext coma yrow coma ycol parentesisC puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		System.out.println("el tamaño de la cola es "+cola.size());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EX ::= identificador seguido E seguido retorno METODO puntoycoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
		 
System.out.println("la cadena final es:"+a.toString());    expresion=a.toString().split(" ");
for (int i = expresion.length-1; i >= 0; i--) {// recorremos la expresion regular al revez.. para poder generar el AFN
                     System.out.println(expresion[i]);
                     afn.construir(expresion[i]);
                }
//-------------------------Crear el AFN en dot  y jpg------------------------------------------------------
//     generar.GenerarDot(id.toString(),generar.estructuraDOT(id.toString(),afn.getFinalAutomata()),"AFN"); 
//     generar.GenerarJpg(id.toString());
//
////-------------------------------Crear thompson y Tabla de transiciones------------------------------------------------------
//
//AFD afd= new AFD(afn.getFinalAutomata(),alfabeto);// se manda como parametro el AFN OBTENIDO ANTERIORMENTE , y el alfabeto
//afd.MAIN();// Aca se crea la tabla de transiciones
//afn.Limpiar();// booramos todo lo de los automatas anteriores
//////--------------------------------Crear el AFD y Asegurar estados de aceptacion----------------------------------------------------
////
//Generar g= new Generar();
//g.trasladar(afd.x, afd.matriz,afd.aceptacion,afd.columna);
//g.GenerarDot(id.toString()+"tabla",g.EstructuraTabla(), "AFD");
//g.GenerarTablaJpg(id.toString()+"tabla");
//
////--------------------------------------Generar AFD-------------------------------------------------------
//g.gen(id.toString()+"AFD", g.estructura(id.toString()),"AFD");
//g.GenerarJpgAFD(id.toString()+"AFD");
////----------------------------------------------------------------------------------------------------------

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // P ::= puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= coma rang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= coma rang puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P ::= P coma rang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P ::= P coma rang puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= CONJ dospuntos identificador seguido rang P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= CONJ dospuntos identificador seguido rang hasta rang puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= EX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= D EX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // D ::= D DEF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= iniciofin D iniciofin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

